{"version":3,"sources":["components/navbar.js","components/header.js","components/card.js","components/wrapper.js","App.js","serviceWorker.js","index.js"],"names":["navbar","props","message","score","topscore","className","href","header","card","name","image","handleClick","id","onClick","alt","src","wrapper","children","App","state","dinos","dinosCopy","clickedDino","filter","dino","clicked","console","log","length","i","setState","sort","a","b","Math","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+xDAceA,EAZA,SAACC,GAAW,IAChBC,EAA4BD,EAA5BC,QAASC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,SACvB,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,eACA,8BAAOJ,GACP,wCAAcC,GACd,4CAAkBC,KCEfG,G,MATA,WACX,OACI,4BAAQF,UAAU,UACd,4CACA,2GCQGG,G,MAXH,SAACP,GAAW,IACbQ,EAAgCR,EAAhCQ,KAAMC,EAA0BT,EAA1BS,MAAOC,EAAmBV,EAAnBU,YAAaC,EAAMX,EAANW,GACjC,OACI,yBAAKP,UAAU,OAAOQ,QAAS,kBAAMF,EAAYC,KAC7C,yBAAKP,UAAU,iBACX,yBAAKS,IAAKL,EAAMM,IAAKL,QCGtBM,G,MATC,SAACf,GAAW,IACjBgB,EAAYhB,EAAZgB,SACP,OACI,yBAAKZ,UAAU,WACVY,K,OC+EEC,E,2MA9EbC,MAAQ,CACNjB,QAAS,2BACTkB,QACAjB,MAAO,EACPC,SAAU,G,EAGZO,YAAc,SAACC,GACb,IAAMS,EAAY,EAAKF,MAAMC,MACvBE,EAAcD,EAAUE,OAAO,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,IAEzD,GAAGU,EAAY,GAAGG,QAAS,CACzBC,QAAQC,IAAIN,EAAUO,QACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAUO,OAAQC,IACpCH,QAAQC,IAAIN,EAAUO,QACtBP,EAAUQ,GAAGJ,SAAU,EAEzB,EAAKK,SAAS,CACZ5B,QAAS,2DACTC,MAAO,EACPiB,MAAOC,SAGN,GAAI,EAAKF,MAAMf,SAAW,EAC7BkB,EAAY,GAAGG,SAAU,EAEzBJ,EAAUU,KAAK,SAASC,EAAEC,GAAG,MAAO,GAAMC,KAAKC,WAE/C,EAAKL,SAAS,CACZV,MAAOC,EACPlB,MAAO,EAAKgB,MAAMhB,MAAQ,EAC1BD,QAAS,mDACR,WACE,EAAKiB,MAAMhB,MAAQ,EAAKgB,MAAMf,UAC/B,EAAK0B,SAAS,CACZ1B,SAAU,EAAKe,MAAMhB,cAKxB,CACHmB,EAAY,GAAGG,SAAU,EAEzB,IAAI,IAAII,EAAI,EAAGA,EAAIR,EAAUO,OAAQC,IACnCR,EAAUQ,GAAGJ,SAAU,EAEzBJ,EAAUU,KAAK,SAASC,EAAEC,GAAG,MAAO,GAAMC,KAAKC,WAE/C,EAAKL,SAAS,CACZV,MAAOC,EACPlB,MAAO,EACPC,SAAU,EACVF,QAAS,iD,wEAKL,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,CAAQH,QAASkC,KAAKjB,MAAMjB,QAASC,MAAOiC,KAAKjB,MAAMhB,MAAOC,SAAUgC,KAAKjB,MAAMf,WACnF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGgC,KAAKjB,MAAMC,MAAMiB,IAAI,SAAAb,GAAI,OACxB,kBAAC,EAAD,CACEb,YAAa,EAAKA,YAClBC,GAAIY,EAAKZ,GACT0B,IAAKd,EAAKZ,GACVH,KAAMe,EAAKf,KACXC,MAAOc,EAAKd,gB,GAtER6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f718dddf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst navbar = (props) => {\r\n    const {message, score, topscore} = props\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\r\n            <span>{message}</span>\r\n            <span>Score: {score}</span>\r\n            <span>Top Score: {topscore}</span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default navbar\r\n","import React from 'react'\r\nimport \"./css/header.css\"\r\nconst header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Clicky Game!</h1>\r\n            <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default header\r\n","import React from 'react'\r\nimport \"./css/card.css\"\r\n\r\nconst card =(props) => {\r\n    const {name, image, handleClick, id} = props\r\n    return (\r\n        <div className=\"card\" onClick={() => handleClick(id)}>\r\n            <div className=\"img-container\">\r\n                <img alt={name} src={image} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card\r\n","import React from 'react'\r\nimport \"./css/wrapper.css\"\r\nconst wrapper = (props) => {\r\n    const {children} = props\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default wrapper\r\n","import React, { Component } from 'react'\nimport Navbar from \"./components/navbar\"\nimport Header from \"./components/header\"\nimport Card from \"./components/card\"\nimport Wrapper from \"./components/wrapper\"\nimport dinos from \"./dinos.json\"\nclass App extends Component {\n  state = {\n    message: \"Click any image to start\",\n    dinos,\n    score: 0,\n    topscore: 0,\n  }\n\n  handleClick = (id) => {\n    const dinosCopy = this.state.dinos\n    const clickedDino = dinosCopy.filter(dino => dino.id === id)\n\n    if(clickedDino[0].clicked) {\n      console.log(dinosCopy.length)\n      for (let i = 0; i < dinosCopy.length; i++) {\n        console.log(dinosCopy.length)\n        dinosCopy[i].clicked = false;\n      }\n      this.setState({\n        message: \"You already clicked that one, now you have to start over\",\n        score: 0,\n        dinos: dinosCopy\n      })\n    }\n    else if (this.state.topscore < 6) {\n      clickedDino[0].clicked = true\n\n      dinosCopy.sort(function(a,b){return 0.5 - Math.random()})\n\n      this.setState({\n        dinos: dinosCopy,\n        score: this.state.score + 1,\n        message: \"Great, that one was not clicked on, keep going!\"\n      }, () => {\n        if(this.state.score > this.state.topscore) {\n          this.setState({\n            topscore: this.state.score\n          })\n        }\n      })\n    }\n    else {\n      clickedDino[0].clicked = true\n\n      for(let i = 0; i < dinosCopy.length; i++) {\n        dinosCopy[i].clicked = false;\n      }\n      dinosCopy.sort(function(a,b){return 0.5 - Math.random()})\n\n      this.setState({\n        dinos: dinosCopy,\n        score: 0,\n        topscore: 6,\n        message: \"CONGRADULATIONS!, now try doing that again\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar message={this.state.message} score={this.state.score} topscore={this.state.topscore} />\n        <Header />\n        <Wrapper>\n          {this.state.dinos.map(dino => (\n            <Card\n              handleClick={this.handleClick}\n              id={dino.id}\n              key={dino.id}\n              name={dino.name}\n              image={dino.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}